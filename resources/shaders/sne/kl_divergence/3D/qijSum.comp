/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer Pos { vec3 posBuffer[]; };
layout(binding = 1, std430) restrict writeonly buffer Qij { float qijBuffer[]; };

// Uniform locations
layout(location = 0) uniform uint nPoints;
layout(location = 1) uniform uint begin;

const uint groupSize = gl_WorkGroupSize.x;
const uint halfGroupSize = groupSize / 2;
shared float reductionArray[halfGroupSize];

void main() {
  uint gid = begin + gl_WorkGroupID.x;
  uint lid = gl_LocalInvocationIndex.x;

  vec3 pos = posBuffer[gl_WorkGroupID.x];

  // Iterate over points to obtain density/gradient
  float q_ij = 0.0;
  for (uint i = lid; i < nPoints; i += groupSize) {
    vec3 t = pos - posBuffer[i];
    q_ij += 1.0 / (1.0 + dot(t, t));
  }
  
  // Perform reduce add over all computed values for this point
  if (lid >= halfGroupSize) {
    reductionArray[lid - halfGroupSize] = q_ij;
  }
  barrier();
  if (lid < halfGroupSize) {
    reductionArray[lid] += q_ij;
  }
  for (uint i = halfGroupSize / 2; i > 1; i /= 2) {
    barrier();
    if (lid < i) {
      reductionArray[lid] += reductionArray[lid + i];
    }
  }
  barrier();
  if (lid < 1) {
    qijBuffer[gid] = reductionArray[0] + reductionArray[1];
  }
}