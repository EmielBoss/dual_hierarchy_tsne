/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, std430) restrict readonly buffer Selection { int selectionBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer Positions { vec2 positionsBuffer[]; };
layout(binding = 2, std430) restrict buffer PosRel { vec2 positionsRelativeBuffer[]; };
layout(binding = 3, std430) restrict buffer PositionsBeforeTranslation { vec2 positionsRelativeBeforeTranslationBuffer[]; };
layout(binding = 4, std430) restrict writeonly buffer Fixed { uint fixedBuffer[]; };
layout(binding = 5, std430) restrict writeonly buffer Moving { uint movingBuffer[]; };
layout(binding = 6, std430) restrict writeonly buffer Weights { float weightsBuffer[]; };
layout(binding = 7, std430) restrict readonly buffer Bounds {
  vec2 minBounds;
  vec2 maxBounds;
  vec2 range;
  vec2 invRange;
};
layout(binding = 8, std430) restrict buffer BoundsSel { vec2 boundsSel[2]; };

layout(location = 0) uniform uint nPoints;
layout(location = 1) uniform vec2 shiftRel;
layout(location = 2) uniform bool translationStarted;
layout(location = 3) uniform bool translationFinished;
layout(location = 4) uniform bool weighForces;
layout(location = 5) uniform float weight;

void main() {
  uint i = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
  if(i < 2) { boundsSel[i] += shiftRel; }
  if(i >= nPoints || selectionBuffer[i] == 0) { return; }

  if (translationStarted) {
    vec2 positionRelative = (positionsBuffer[i] - minBounds) * invRange;
    positionsRelativeBuffer[i] = positionRelative;
    positionsRelativeBeforeTranslationBuffer[i] = positionRelative;
  }

  positionsRelativeBuffer[i] += shiftRel;
  fixedBuffer[i] = int(true);
  movingBuffer[i] = int(true);
  if(weighForces) { weightsBuffer[i] = weight; }

  if(translationFinished) {
    positionsRelativeBuffer[i] -= min(vec2(0.f), boundsSel[0]);
    positionsRelativeBuffer[i] -= max(vec2(0.f), boundsSel[1] - 1.f);
  }
}