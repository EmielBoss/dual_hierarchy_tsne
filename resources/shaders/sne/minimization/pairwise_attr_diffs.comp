/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z  = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer Sele { uint selectionBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer Data { float datasetBuffer[]; };
layout(binding = 2, std430) restrict readonly buffer Layo { Layout layoutBuffer[]; };
layout(binding = 3, std430) restrict readonly buffer Neig { uint neighborsBuffer[]; };
layout(binding = 4, std430) restrict buffer SNCt { uint neighborsSelectedBuffer[]; };
layout(binding = 5, std430) restrict buffer PAtD { float pairwiseAttrDistsBuffer[]; };

// Uniform values
layout(location = 0) uniform uint nPoints;
layout(location = 1) uniform uint nHighDims;

void main() {
  const uint i = (gl_WorkGroupSize.x * gl_WorkGroupID.x + gl_LocalInvocationID.x) / nHighDims;
  const uint d = (gl_WorkGroupSize.x * gl_WorkGroupID.x + gl_LocalInvocationID.x) % nHighDims;

  if (i >= nPoints || d >= nHighDims || selectionBuffer[i] == 0) { return; }
  
  Layout l = layoutBuffer[i];

  for (uint ij = l.offset; ij < l.offset + l.size; ij++) {
    uint j = neighborsBuffer[ij];
    if(selectionBuffer[j] != 1) { continue; }
    neighborsSelectedBuffer[ij] = 1;

    pairwiseAttrDistsBuffer[i * nHighDims + d] += abs(datasetBuffer[i * nHighDims + d] - datasetBuffer[j * nHighDims + d]);
  }
}