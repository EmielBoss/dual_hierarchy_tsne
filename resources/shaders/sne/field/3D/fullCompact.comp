/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

layout(local_size_x = 8, local_size_y = 4, local_size_z = 4) in;
  
layout(binding = 0, std430) restrict writeonly buffer Queue { uvec3 queueBuffer[]; };
layout(binding = 1, std430) restrict coherent buffer QHead { uint queueHead; }; 

layout(location = 0) uniform uint gridDepth;
layout(location = 1) uniform uvec3 textureSize;
layout(location = 2) uniform usampler2D stencilSampler;

void main() {
  // Check that invocation is inside field texture
  const uvec3 i = gl_WorkGroupID.xyz * gl_WorkGroupSize.xyz + gl_LocalInvocationID.xyz;
  if (min(i, textureSize - 1) != i) {
    return;
  }

  // Compute pixel position in [0, 1]
  vec3 pos = (vec3(i) + 0.5) / vec3(textureSize);

  // Read voxel grid
  uvec4 gridValue = texture(stencilSampler, pos.xy);
  int z = int(pos.z * gridDepth);

  // Push pixel on queue if not to be skipped
  if (bitfieldExtract(gridValue[z / 32], 31 - (z % 32) , 1) > 0) {
    queueBuffer[atomicAdd(queueHead, 1)] = i;
  }
}