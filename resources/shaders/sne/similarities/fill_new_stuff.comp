/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

#extension GL_KHR_shader_subgroup_basic : enable

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z  = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer IdxSel { uint indicesBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer LayPrv { Layout layoutsPrevBuffer[]; };
layout(binding = 2, std430) restrict readonly buffer Lay { Layout layoutsBuffer[]; };
layout(binding = 3, std430) restrict coherent buffer Cnt { uint countsBuffer[]; };
layout(binding = 4, std430) restrict buffer NeiA { uint neighborsAddedBuffer[]; };
layout(binding = 5, std430) restrict buffer Nei { uint neighborsBuffer[]; };
layout(binding = 6, std430) restrict writeonly buffer Sim { float similaritiesBuffer[]; };
layout(binding = 7, std430) restrict writeonly buffer SimO { float similaritiesBackup[]; };

// Uniform values
layout(location = 0) uniform uint nSelectedAll;
layout(location = 1) uniform uint nSelectedPri;
layout(location = 2) uniform uint nSelectedSec;
layout(location = 3) uniform uint omissionRatePri;
layout(location = 4) uniform uint omissionRateSec;
layout(location = 5) uniform float simAvg;

// Returns whether j is a neighbor of i
bool alreadyNeighbors(uint i, uint j, uint offset, uint size) {
  // Unfortunately the list is unsorted, so search time is linear
  for (uint ij = offset; ij < offset + size; ij++) {
    if (neighborsBuffer[ij] == j) {
      return true;
    }
  }
  return false;
}

bool omitNeighbors(uint idx, uint jdx) {
  uint indexOffset = idx < nSelectedPri ? nSelectedPri : 0;
  uint jndexOffset = jdx < nSelectedPri ? nSelectedPri : 0;
  uint k_i = idx - indexOffset;
  uint k_j = jdx - jndexOffset;
  // return (k_i + k_j) % 2 == 0;
  bool omit_i = (k_i + k_j) % 10 < (idx < nSelectedPri ? omissionRatePri : omissionRateSec);
  bool omit_j = (k_i + k_j) % 10 < (jdx < nSelectedPri ? omissionRatePri : omissionRateSec);
  return omit_i || omit_j;
}

const uint nSelectedMax = max(nSelectedPri, nSelectedSec);

void main() {
  const uint idx = (gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x) / gl_SubgroupSize;

  if(idx >= nSelectedAll) { return; }
  uint indexOffset = idx < nSelectedPri ? nSelectedPri : 0;
  uint indexSize = idx < nSelectedPri ? nSelectedSec : nSelectedPri;

  const uint i = indicesBuffer[idx];
  Layout l = layoutsBuffer[i];
  Layout lp = layoutsPrevBuffer[i];

  for (uint jdx = indexOffset + gl_SubgroupInvocationID; jdx < indexOffset + indexSize; jdx += gl_SubgroupSize) {
    uint j = indicesBuffer[jdx];
    if(omitNeighbors(idx, jdx) || alreadyNeighbors(i, j, l.offset, lp.size)) { continue; }
    uint k = atomicAdd(countsBuffer[idx], 1); // k is assigned the old value of countsBuffer[i]
    uint ij = l.offset + lp.size + k;
    neighborsAddedBuffer[idx * nSelectedMax + k] = j;
    neighborsBuffer[ij] = j;
    similaritiesBuffer[ij] = simAvg;
    similaritiesBackup[ij] = simAvg;
  }

}