/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer Layu { Layout layoutBuffer[]; };
layout(binding = 1, std430) restrict buffer Nei { uint neighborsBuffer[]; };
layout(binding = 2, std430) restrict buffer Sim { float similaritiesBuffer[]; };
layout(binding = 3, std430) restrict buffer Dis { float distancesBuffer[]; };

// Uniform values
layout(location = 0) uniform uint nPoints;

void main() {
  const uint i = (gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x);

  if (i >= nPoints) { return; }

  Layout l = layoutBuffer[i];

  for (uint ijMax = l.offset + l.size - 1; ijMax > l.offset; ijMax--) {
    for (uint ij = l.offset; ij < ijMax; ij++) {
      if(neighborsBuffer[ij] > neighborsBuffer[ij+1]) {
        uint tmp = neighborsBuffer[ij];
        neighborsBuffer[ij] = neighborsBuffer[ij+1];
        neighborsBuffer[ij+1] = tmp;

        float tmpS = similaritiesBuffer[ij];
        similaritiesBuffer[ij] = similaritiesBuffer[ij+1];
        similaritiesBuffer[ij+1] = tmpS;

        float tmpD = distancesBuffer[ij];
        distancesBuffer[ij] = distancesBuffer[ij+1];
        distancesBuffer[ij+1] = tmpD;
      }
    }
  }
}