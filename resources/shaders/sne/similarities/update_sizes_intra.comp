/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer IndicesSelection { uint indicesBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer Layouts { Layout layoutsBuffer[]; };
layout(binding = 2, std430) restrict readonly buffer Neighbors { uint neighborsBuffer[]; };
layout(binding = 3, std430) restrict buffer Sizes { uint sizesBuffer[]; };

// Uniform values
layout(location = 0) uniform uint nSelected;
layout(location = 1) uniform bool addOrRemove;

// Returns whether j is a neighbor of i
bool alreadyNeighbors(uint i, uint j, Layout l) {
  // Unfortunately the list is unsorted, so search time is linear
  for (uint ij = l.offset; ij < l.offset + l.size; ij++) {
    if (neighborsBuffer[ij] == j) {
      return true;
    }
  }
  return false;
}

void main() {
  const uint idx = (gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x) / gl_SubgroupSize;

  if(idx >= nSelected) { return; }

  const uint i = indicesBuffer[idx];
  Layout li = layoutsBuffer[i];

  uint count = 0;
  for (uint jdx = gl_SubgroupInvocationID; jdx < nSelected; jdx += gl_SubgroupSize) {
    uint j = indicesBuffer[jdx];
    Layout lj = layoutsBuffer[j];
    if(i != j && (addOrRemove ^^ alreadyNeighbors(i, j, li))) { count++; }
  }

  count = subgroupAdd(count);
  if(gl_SubgroupInvocationID < 1) {
    sizesBuffer[i] += count * (addOrRemove ? 1 : -1);
  }
}