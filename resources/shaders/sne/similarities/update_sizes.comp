/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer SelB { uint selectionBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer SelC { uint selectionCounts[2]; };
layout(binding = 2, std430) restrict readonly buffer Layo { Layout layoutsBuffer[]; };
layout(binding = 3, std430) restrict readonly buffer Neig { uint neighborsBuffer[]; };
layout(binding = 4, std430) restrict writeonly buffer Size { uint sizesBuffer[]; };

// Uniform values
layout(location = 0) uniform uint nPoints;

void main () {
  const uint i = (gl_WorkGroupSize.x * gl_WorkGroupID.x + gl_LocalInvocationID.x);
  const uint si = selectionBuffer[i];
  
  if (si == 0 || i >= nPoints) { return; }

  Layout l = layoutsBuffer[i];

  uint size = l.size + selectionCounts[si % 2];
  for (uint ij = l.offset; ij < l.offset + l.size; ij++) {
    uint j = neighborsBuffer[ij];
    uint sj = selectionBuffer[j];
    if(sj > 0 && si == ((sj % 2) + 1)) { size--; } // This pairing from the different clusters are already neighbors, so i does not need to add j again
  }

  // Store result
  sizesBuffer[i] = size;
}