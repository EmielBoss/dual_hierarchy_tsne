/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer SelB { uint selectionBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer SelC { uint selectionCount[2]; };
layout(binding = 2, std430) restrict readonly buffer Layo { Layout layoutsBuffer[]; };
layout(binding = 3, std430) restrict readonly buffer Neig { uint neighboursBuffer[]; };
layout(binding = 4, std430) restrict buffer Size { uint sizesBuffer[]; };

// Uniform values
layout(location = 0) uniform uint nPoints;

// Shorthand subgroup/warp constants
const uint thread = gl_SubgroupInvocationID;
const uint nThreads = gl_SubgroupSize;

// Returns other selection (other(1) == 2, other(2) == 1)
uint other(uint s) {
  return (s % 2) + 1;
}

void main () {
  const uint i = (gl_WorkGroupSize.x * gl_WorkGroupID.x + gl_LocalInvocationID.x) / nThreads;

  const uint si = selectionBuffer[i];
  if (si == 0 || i >= nPoints) { return; }

  Layout l = layoutsBuffer[i];

  uint alreadyNeighbourCount = 0;
  for (uint ij = l.offset + thread; ij < l.offset + l.size; ij += nThreads) {
    uint j = neighboursBuffer[ij];
    uint sj = selectionBuffer[j];
    if(other(si) == sj) { alreadyNeighbourCount++; } // This pairing from the different clusters are already neighbours, so i does not need to add j again
  }

  alreadyNeighbourCount = subgroupAdd(alreadyNeighbourCount);

  // Store result
  uint additionalNeighbourCount = selectionCount[other(si)-1] - alreadyNeighbourCount;
  if (thread < 1) { sizesBuffer[i] += additionalNeighbourCount; }
}