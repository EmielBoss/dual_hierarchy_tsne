/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

#define FLT_MAX 3.402823466e+38F
#define FLT_MIN 1.175494351e-38F

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z  = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer SelD { int selectionBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer SelA { uint weightedAttributeIndicesBuffer[]; };
layout(binding = 2, std430) restrict readonly buffer Data { float datasetBuffer[]; };
layout(binding = 3, std430) restrict readonly buffer Dist { float distancesBuffer[]; };
layout(binding = 4, std430) restrict readonly buffer Sims { float similaritiesBuffer[]; };
layout(binding = 5, std430) restrict readonly buffer Layo { Layout layoutBuffer[]; };
layout(binding = 6, std430) restrict readonly buffer Neig { uint neighborsBuffer[]; };
layout(binding = 7, std430) restrict buffer SSum { float similarityOrigSumsBuffer[]; };
layout(binding = 8, std430) restrict buffer Diff { float differencesBuffer[]; };
layout(binding = 9, std430) restrict writeonly buffer DisSums { float distanceSums[]; };
layout(binding = 10, std430) restrict writeonly buffer DifSums { float differenceSums[]; };
layout(binding = 11, std430) restrict writeonly buffer SelCnts { uint selectedNeighborCountsBuffer[]; };

// Uniform values
layout(location = 0) uniform uint nPoints;
layout(location = 1) uniform uint nHighDims;
layout(location = 2) uniform bool phaseOneOrTwo;
layout(location = 3) uniform uint batchBegin;
layout(location = 4) uniform uint batchEnd;

// Shorthand subgroup/warp constants
const uint thread = gl_SubgroupInvocationID;
const uint nThreads = gl_SubgroupSize;

void main() {
  const uint i = (gl_WorkGroupSize.x * gl_WorkGroupID.x + gl_LocalInvocationID.x) / nThreads;

  if (i >= nPoints || selectionBuffer[i] == 0) { return; }
  
  Layout l = layoutBuffer[i];

  if(phaseOneOrTwo) { // Phase one calculates the distance over the 
    for (uint ij = l.offset + thread; ij < l.offset + l.size; ij += nThreads) {
      uint j = neighborsBuffer[ij];
      if(selectionBuffer[j] == 1) {
        for(uint a = batchBegin; a < batchEnd; a++) {
          uint attr = weightedAttributeIndicesBuffer[a];
          float diffAttr = abs(datasetBuffer[i * nHighDims + attr] - datasetBuffer[j * nHighDims + attr]);
          differencesBuffer[ij] += diffAttr;
        }
      }
    }
  } else {
    float simSum = 0.f;
    float distSum = 0.f;
    float diffSum = 0.f;
    uint nSelectedNeighbors = 0;
    for (uint ij = l.offset + thread; ij < l.offset + l.size; ij += nThreads) {
      uint j = neighborsBuffer[ij];
      float sim = similaritiesBuffer[ij];
      float dist = distancesBuffer[ij];
      float diff = differencesBuffer[ij];
      if(selectionBuffer[j] == 1) {
        simSum += sim;
        distSum += dist;
        diffSum += diff;
        nSelectedNeighbors++;
      }
    }
    simSum = subgroupAdd(simSum);
    distSum = subgroupAdd(distSum);
    diffSum = subgroupAdd(diffSum);
    nSelectedNeighbors = subgroupAdd(nSelectedNeighbors);

    if (thread < 1 && nSelectedNeighbors > 0) {
      similarityOrigSumsBuffer[i] = simSum;
      distanceSums[i] = distSum;
      differenceSums[i] = diffSum;
      selectedNeighborCountsBuffer[i] = nSelectedNeighbors;
    }
  }

}