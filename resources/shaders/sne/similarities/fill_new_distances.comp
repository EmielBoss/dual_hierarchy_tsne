/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

#extension GL_KHR_shader_subgroup_basic : enable

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z  = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer Data { float datasetBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer LayPrv { Layout layoutsPrevBuffer[]; };
layout(binding = 2, std430) restrict readonly buffer Lay { Layout layoutsBuffer[]; };
layout(binding = 3, std430) restrict readonly buffer IdxSel { uint indicesBuffer[]; };
layout(binding = 4, std430) restrict readonly buffer Nei { uint neighborsBuffer[]; };
layout(binding = 5, std430) restrict buffer DistL1 { float distancesL1Buffer[]; };
layout(binding = 6, std430) restrict buffer DistL2 { float distancesL2Buffer[]; };

// Uniform values
layout(location = 0) uniform uint nSelectedAll;
layout(location = 1) uniform uint nHighDims;
layout(location = 2) uniform uint batchBegin;
layout(location = 3) uniform uint batchEnd;

void main() {
  const uint idx = (gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x) / gl_SubgroupSize;

  if(idx >= nSelectedAll) { return; }

  const uint i = indicesBuffer[idx];
  Layout l = layoutsBuffer[i];
  Layout lp = layoutsPrevBuffer[i];

  for (uint ij = l.offset + lp.size + gl_SubgroupInvocationID; ij < l.offset + l.size; ij += gl_SubgroupSize) {
    uint j = neighborsBuffer[ij];
    for(uint d = batchBegin; d < batchEnd; d++) {
      float diff = datasetBuffer[i * nHighDims + d] - datasetBuffer[j * nHighDims + d];
      distancesL1Buffer[ij] += abs(diff);
      distancesL2Buffer[ij] += pow(diff, 2);
    }
  }

}