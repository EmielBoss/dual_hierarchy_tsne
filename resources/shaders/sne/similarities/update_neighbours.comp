/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z  = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer Sele { uint selectionBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer SelI { uint selectionIndicesBuffer[]; };
layout(binding = 2, std430) restrict readonly buffer NeigP { uint neighboursBufferPrev[]; };
layout(binding = 3, std430) restrict readonly buffer SimiP { float similaritiesBufferPrev[]; };
layout(binding = 4, std430) restrict readonly buffer LayoP { Layout layoutsBufferPrev[]; };
layout(binding = 5, std430) restrict readonly buffer Layo { Layout layoutsBuffer[]; };
layout(binding = 6, std430) restrict buffer Counts { uint counts[]; };
layout(binding = 7, std430) restrict writeonly buffer Neig { uint neighboursBuffer[]; };
layout(binding = 8, std430) restrict writeonly buffer Simi { float similaritiesBuffer[]; };

// Uniform values
layout(location = 0) uniform uint nPoints;
layout(location = 1) uniform uint nSelected;

void main() {
  const uint i = (gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x);

  if (i >= nPoints) { return; }

  Layout l = layoutsBuffer[i];
  Layout lPrev = layoutsBufferPrev[i];
  // Copy old neighbours and corresponding similarities
  for(uint n = 0; n < lPrev.size; n++) {
    neighboursBuffer[l.offset + n] = neighboursBufferPrev[lPrev.offset + n];
    similaritiesBuffer[l.offset + n] = similaritiesBufferPrev[lPrev.offset + n];
  }

  if (selectionBuffer[i] == 0) { return; }

  uint count = 0;
  for(uint s = 0; s < nSelected; s++) {
    uint j = selectionIndicesBuffer[s]; // Read potential neighbour to be added

    if(selectionBuffer[i] == selectionBuffer[j]) { continue; } // TODO: This can be avoided if the selectionIndices are segregated

    // Check if j is not already a neighbour
    bool alreadyPresent = false;
    for(uint ij = lPrev.offset; ij < lPrev.offset + lPrev.size; ij++) {
      if(neighboursBufferPrev[ij] == j) { alreadyPresent = true; }
    }

    if(!alreadyPresent) {
      neighboursBuffer[l.offset + lPrev.size + count] = j; // Add new neighbour
      count++;
    }
  }

}