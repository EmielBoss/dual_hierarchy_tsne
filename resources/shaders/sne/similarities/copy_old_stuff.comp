/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

#extension GL_KHR_shader_subgroup_basic : enable

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer LayPrv { Layout layoutsPrevBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer NeiPrv { uint neighborsPrevBuffer[]; };
layout(binding = 2, std430) restrict readonly buffer SimPrv { float similaritiesPrevBuffer[]; };
layout(binding = 3, std430) restrict readonly buffer SimOPrv { float similaritiesPrevBackup[]; };
layout(binding = 4, std430) restrict readonly buffer DisPrv { float distancesL1PrevBuffer[]; };
layout(binding = 5, std430) restrict readonly buffer Lay { Layout layoutsBuffer[]; };
layout(binding = 6, std430) restrict writeonly buffer Nei { uint neighborsBuffer[]; };
layout(binding = 7, std430) restrict writeonly buffer Sim { float similaritiesBuffer[]; };
layout(binding = 8, std430) restrict writeonly buffer SimO { float similaritiesBackup[]; };
layout(binding = 9, std430) restrict writeonly buffer Dis { float distancesL1Buffer[]; };
layout(binding = 10, std430) restrict readonly buffer Sel { int selectionBuffer[]; };
layout(binding = 11, std430) restrict writeonly buffer Cnt { uint countsBuffer[]; };

// Uniform values
layout(location = 0) uniform uint nPoints;
layout(location = 1) uniform bool addOrRemove;
layout(location = 2) uniform bool interOrIntra;

void main() {
  const uint i = (gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x) / gl_SubgroupSize;

  if(i >= nPoints) { return; }
  
  Layout l = layoutsBuffer[i];
  Layout lp = layoutsPrevBuffer[i];
  for (uint ij = gl_SubgroupInvocationID; ij < lp.size; ij += gl_SubgroupSize) {
    uint j = neighborsPrevBuffer[lp.offset + ij];
    if(!addOrRemove && (
      ( interOrIntra && selectionBuffer[i] >  0 && selectionBuffer[j] >  0 && selectionBuffer[i] != selectionBuffer[j]) ||
      (!interOrIntra && selectionBuffer[i] == 1 && selectionBuffer[j] == 1)
    )) {
      continue;
    }

    uint k = addOrRemove ? ij : atomicAdd(countsBuffer[i], 1);

    neighborsBuffer[l.offset + k] = neighborsPrevBuffer[lp.offset + ij];
    similaritiesBuffer[l.offset + k] = similaritiesPrevBuffer[lp.offset + ij];
    similaritiesBackup[l.offset + k] = similaritiesPrevBackup[lp.offset + ij];
    distancesL1Buffer[l.offset + k] = distancesL1PrevBuffer[lp.offset + ij];
  }
}