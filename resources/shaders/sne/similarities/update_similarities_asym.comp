/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

#define FLT_MAX 3.402823466e+38F
#define FLT_MIN 1.175494351e-38F

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer Data { float datasetBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer LayoP { Layout layoutsBufferPrev[]; };
layout(binding = 2, std430) restrict readonly buffer Layo { Layout layoutsBuffer[]; };
layout(binding = 3, std430) restrict readonly buffer Beta { float betasBuffer[]; };
layout(binding = 4, std430) restrict readonly buffer BetF { bool betasFoundBuffer[]; };
layout(binding = 5, std430) restrict buffer v_jiSum { float v_jiSumBuffer[]; };
layout(binding = 6, std430) restrict readonly buffer Neig { uint neighboursBuffer[]; };
layout(binding = 7, std430) restrict buffer Simi { float similaritiesBuffer[]; };
layout(binding = 8, std430) restrict readonly buffer SelI { uint selectionIndicesBuffer[]; };

// Uniform values
layout(location = 0) uniform uint nSelected;
layout(location = 1) uniform uint nHighDims;

float squaredDistance(uint i, uint j) {
  float sum = 0.0f;
  for(uint d = 0; d < nHighDims; d++) {
    sum += pow(datasetBuffer[i * nHighDims + d] - datasetBuffer[j * nHighDims + d], 2);
  }
  return sum;
}

void main() {
  const uint thread = (gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x);

  if (thread >= nSelected) { return; }

  const uint i = selectionIndicesBuffer[thread];

  Layout liPrev = layoutsBufferPrev[i];
  Layout li = layoutsBuffer[i];

  // Calculate similarities
  if(betasFoundBuffer[i]) {
    const float beta = betasBuffer[i];
    for (uint ij = li.offset + liPrev.size; ij < li.offset + li.size; ij++) {
      const uint j = neighboursBuffer[ij];
      const float v_ji = exp(-beta * squaredDistance(i, j));
      similaritiesBuffer[ij] = v_ji; // Add initial similarity
      v_jiSumBuffer[i] += v_ji;
    }
  } else {
    float v_jiButNotReally = 1.f / float(li.size);
    for (uint ij = li.offset + liPrev.size; ij < li.offset + li.size; ij++) {
      similaritiesBuffer[ij] = v_jiButNotReally; // Add similarity
    }
  }

  if(betasFoundBuffer[i]) {
    for (uint ij = li.offset + liPrev.size; ij < li.offset + li.size; ij++) {
      const float v_ji = similaritiesBuffer[ij];
      const float p_ji = v_ji / v_jiSumBuffer[i];
      similaritiesBuffer[ij] = p_ji; // Add definitive similarity
    }
  }

}