/*
 * MIT License
 *
 * Copyright (c) 2021 Mark van de Ruit (Delft University of Technology)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#version 460 core

#define FLT_MAX 3.402823466e+38F
#define FLT_MIN 1.175494351e-38F

struct Layout {
  uint offset;
  uint size;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Buffer bindings
layout(binding = 0, std430) restrict readonly buffer LayPrv { Layout layoutsPrevBuffer[]; };
layout(binding = 1, std430) restrict readonly buffer Lay { Layout layoutsBuffer[]; };
layout(binding = 2, std430) restrict readonly buffer IdxSel { uint indicesBuffer[]; };
layout(binding = 3, std430) restrict readonly buffer Nei { uint neighborsBuffer[]; };
layout(binding = 4, std430) restrict readonly buffer DistL2 { float distancesL2Buffer[]; };
layout(binding = 5, std430) restrict buffer Sim { float similaritiesBuffer[]; };
layout(binding = 6, std430) restrict writeonly buffer SimO { float similaritiesBackup[]; };

// Uniform values
layout(location = 0) uniform uint nSelectedAll;
layout(location = 1) uniform uint nIters;
layout(location = 2) uniform float perplexity;
layout(location = 3) uniform float epsilon;

void main() {
  const uint idx = (gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x);

  if(idx >= nSelectedAll) { return; }

  const uint i = indicesBuffer[idx];
  Layout l = layoutsBuffer[i];
  Layout lp = layoutsPrevBuffer[i];

  // Use beta instead of 1/(2*sigma^2), as per BH-SNE code
  float beta = 1.f;
  float lowerBoundBeta = -FLT_MAX;
  float upperBoundBeta = FLT_MAX;
  float sum = FLT_MIN;
  
  // Perform a binary search for the best fit for Beta
  bool foundBeta = false;
  uint iter = 0;
  while (!foundBeta && iter < nIters) {
    // Compute P_i with current value of Beta (Sigma, actually)
    // Ignore j = 0, as that is i itself in the local neighborhood
    sum = FLT_MIN;
    for (uint ij = l.offset + lp.size; ij < l.offset + l.size; ij++) {
      const float v_ji = exp(-beta * distancesL2Buffer[ij]);
      similaritiesBuffer[ij] = v_ji;
      sum += v_ji;
    }

    // Compute entropy over the current Gaussian's values
    float entropy = 0.f;
    for (uint ij = l.offset + lp.size; ij < l.offset + l.size; ij++) {
      entropy += beta * distancesL2Buffer[ij] * similaritiesBuffer[ij];
    }
    entropy = (entropy / sum) + log(sum);

    // Test if the difference falls below epsilon
    float entropyDiff = entropy - log(perplexity);
    foundBeta = entropyDiff < epsilon && -entropyDiff < epsilon;

    // Tighten bounds for binary search
    if (!foundBeta) {
      if (entropyDiff > 0) {
        lowerBoundBeta = beta;
        beta = (upperBoundBeta == FLT_MAX || upperBoundBeta == -FLT_MAX)
              ? 2.f * beta
              : 0.5f * (beta + upperBoundBeta);
      } else {
        upperBoundBeta = beta;
        beta = (lowerBoundBeta == FLT_MAX || lowerBoundBeta == -FLT_MAX)
              ? 0.5f * beta
              : 0.5f * (beta + lowerBoundBeta);
      }
    }
    
    iter++;
  }

  // Normalize kernel at the end
  if (!foundBeta) { // Edge case that likely doesn't happen too much in practice
    const float v = 1.f / float(l.size - lp.size);
    for (uint ij = l.offset + lp.size; ij < l.offset + l.size; ij++) {
      similaritiesBuffer[ij] = v;
      similaritiesBackup[ij] = v;
    }
  } else {
    const float div = 1.f / sum;
    for (uint ij = l.offset + lp.size; ij < l.offset + l.size; ij++) {
      similaritiesBuffer[ij] *= div; // Now p_j|i is stored
      similaritiesBackup[ij] = similaritiesBuffer[ij]; // Now p_j|i is stored
    }
  }
}